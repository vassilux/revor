package utils

import (
	"crypto/rand"
	"encoding/base64"
	"github.com/robfig/revel"
	"io"
)

var rawTokenLength, lengthCSRFToken int

func getRandomBytes(length int) (bytes []byte, err error) {
	bytes = make([]byte, length)
	_, err = io.ReadFull(rand.Reader, bytes)
	return
}

// A session token is generated by encoding bytes read from crypto/rand as base64.
func GenerateNewToken(c *revel.Controller) (token string) {
	bytes, _ := getRandomBytes(rawTokenLength)
	// Due to base64 encoding, CSRF tokens cannot have null bytes and therefore
	// can safely be used as session values in Revel.
	token = base64.StdEncoding.EncodeToString(bytes)
	c.Session["token"] = token
	return
}

func init() {
	revel.OnAppStart(func() {
		//
		rawTokenLength = revel.Config.IntDefault("app.token.length", 32)
		if rawTokenLength < 32 || rawTokenLength > 512 {
			revel.ERROR.Panicf("app.token.length=%d: expected a length in [32..512].\n", rawTokenLength)
		}
		lengthCSRFToken = base64.StdEncoding.EncodedLen(rawTokenLength)
		// Check that cryptographically secure PRNG is available.
		_, err := getRandomBytes(1)
		if err != nil {
			revel.ERROR.Panicf("crypto/rand is unavailable: Read() failed with %#v.\n", err)
		}
	})
}
